name: Controllo Eventi Famiglia

on:
  schedule:
    # Esegue alle 06:00 UTC (le 08:00 del mattino in Italia)
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  check-and-notify:
    runs-on: ubuntu-latest
    steps:
      - name: Controlla il codice del repository
        uses: actions/checkout@v4

      - name: Imposta Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Crea ed esegui lo script di notifica
        run: |
          cat <<'EOF' > script.js
          const fs = require("fs");
          const path = require("path");
          const { execSync } = require("child_process");

          // Topic impostato direttamente per massima affidabilit√†
          const topic = "msgalternativo";

          const htmlPath = path.join(process.env.GITHUB_WORKSPACE, "Eventi.html");
          const htmlContent = fs.readFileSync(htmlPath, "utf8");
          const match = htmlContent.match(/const eventiData = (\[[\s\S]*?\]);/);
          if (!match) {
              console.log("Array eventiData non trovato nel file HTML.");
              process.exit(0);
          }
          
          const eventiData = JSON.parse(match[1]);

          // --- DATA REALE (VERSIONE FINALE) ---
          const oggi = new Date();
          const domani = new Date(oggi);
          domani.setDate(oggi.getDate() + 1);
          const dopodomani = new Date(oggi);
          dopodomani.setDate(oggi.getDate() + 2);
          // ------------------------------------

          // Funzione per filtrare eventi per una data specifica
          function getEventiPerData(targetDate) {
            const giorno = targetDate.getDate();
            const mese = targetDate.getMonth() + 1;
            
            return eventiData.filter(evento => {
              if (!evento.Data) return false;
              const partiData = evento.Data.split("/");
              return parseInt(partiData[0], 10) === giorno && parseInt(partiData[1], 10) === mese;
            });
          }

          // Funzione per inviare notifica
          function inviaNotifica(messaggio, titolo, priorita = "default") {
            const command = `curl -H "Title: ${titolo}" -H "Tags: cake" -H "Priority: ${priorita}" -d @- ntfy.sh/${topic}`;
            
            console.log(`Invio notifica: ${messaggio}`);
            try {
              const output = execSync(command, { input: messaggio }).toString();
              console.log("Risposta dal server ntfy:", output);
            } catch (error) {
              console.error("Errore durante l'invio della notifica:", error);
            }
          }

          // Controlla eventi di oggi
          const eventiDiOggi = getEventiPerData(oggi);
          if (eventiDiOggi.length > 0) {
            const nomiEventi = eventiDiOggi.map(e => `${e.Nominativo} (${e.Tipo.slice(0,1)})`).join(", ");
            const messaggio = `üéâ Oggi festeggiano: ${nomiEventi}`;
            const titolo = "üóìÔ∏è Eventi di Oggi";
            inviaNotifica(messaggio, titolo, "max");
          }

          // Controlla eventi di domani
          const eventiDiDomani = getEventiPerData(domani);
          if (eventiDiDomani.length > 0) {
            const nomiEventi = eventiDiDomani.map(e => `${e.Nominativo} (${e.Tipo.slice(0,1)})`).join(", ");
            const messaggio = `‚è∞ Domani festeggiano: ${nomiEventi}`;
            const titolo = "üóìÔ∏è Promemoria Domani";
            inviaNotifica(messaggio, titolo, "high");
          }

          // Controlla eventi di dopodomani
          const eventiDiDopodomani = getEventiPerData(dopodomani);
          if (eventiDiDopodomani.length > 0) {
            const nomiEventi = eventiDiDopodomani.map(e => `${e.Nominativo} (${e.Tipo.slice(0,1)})`).join(", ");
            const dataDopodomani = `${dopodomani.getDate()}/${dopodomani.getMonth() + 1}`;
            const messaggio = `üìÖ Fra due giorni (${dataDopodomani}) festeggiano: ${nomiEventi}`;
            const titolo = "üóìÔ∏è Promemoria Fra Due Giorni";
            inviaNotifica(messaggio, titolo, "default");
          }

          if (eventiDiOggi.length === 0 && eventiDiDomani.length === 0 && eventiDiDopodomani.length === 0) {
            console.log("Nessun evento per oggi, domani o dopodomani.");
          }
          EOF
          
          node script.js
