name: Notifica eventi prossimi

on:
  schedule:
    - cron: '0 6 * * *'  # ogni giorno alle 08:00 ora italiana (06:00 UTC)
  workflow_dispatch:

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pip install requests pandas

      - name: Leggi e invia notifiche eventi
        env:
          NTFY: ${{ secrets.NTFY }}
          FILE_CSV: eventi.csv
        run: |
          python - <<EOF
          import os
          import pandas as pd
          from datetime import datetime, timedelta
          import requests

          file_csv = os.environ.get('FILE_CSV', 'eventi.csv')
          if not os.path.exists(file_csv):
              print(f"File {file_csv} non trovato!")
              exit(1)
          df = pd.read_csv(file_csv)

          def parse_data(s):
              try:
                  return datetime.strptime(s, "%d/%m/%Y").date()
              except Exception:
                  return None

          oggi = datetime.now().date()
          for idx, row in df.iterrows():
              data_str = str(row['Data'])
              data_evento = parse_data(data_str)
              if not data_evento:
                  continue
              diff = (data_evento - oggi).days
              if 0 <= diff <= 2:
                  if diff == 0:
                      avviso = f"Oggi Ã¨ il giorno di {row['Nominativo']}! ðŸŽ‰ ({row['Tipo']})"
                  elif diff == 1:
                      avviso = f"Domani c'Ã¨ {row['Tipo']} di {row['Nominativo']}!"
                  elif diff == 2:
                      avviso = f"Tra due giorni c'Ã¨ {row['Tipo']} di {row['Nominativo']}!"
                  else:
                      avviso = f"Prossimo evento: {row['Tipo']} di {row['Nominativo']} il {row['Data']}"

                  url_ntfy = os.environ['NTFY']
                  try:
                      r = requests.post(url_ntfy, data=avviso.encode('utf-8'))
                      print(f"Notifica inviata: {avviso} (Status: {r.status_code})")
                  except Exception as e:
                      print(f"Errore invio notifica: {e}")
          EOF
